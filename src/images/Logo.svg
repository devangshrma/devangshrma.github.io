<?xml version="1.0" encoding="utf-8"?><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 84 96"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g transform="matrix(1, 0, 0, 1, -23.438128, -2.675586)">
    <g transform="matrix(1, 0, 0, 1, 26.625418, 4.892977)">
      <polygon id="Shape" stroke="#64FFDA" strokewidth="5" strokelinecap="round" strokelinejoin="round" points="38.572 0.321 -0.428 22.321 -0.428 67.321 38.572 90.321 77.572 68.321 77.572 23.321" style="fill: rgb(10, 25, 47); paint-order: fill;"/>
      <path d="M 24.935 46.894 L 22.335 46.444 C 21.408 46.139 20.538 45.679 19.763 45.085 C 18.624 44.189 17.779 42.974 17.335 41.594 C 17.065 40.877 16.902 40.123 16.85 39.358 C 16.84 39.204 16.835 39.049 16.835 38.894 C 16.844 37.726 17.111 36.573 17.616 35.519 C 17.964 34.784 18.389 34.089 18.885 33.444 C 20.268 31.639 22.026 30.155 24.037 29.095 C 26.803 27.58 30.285 26.513 34.485 25.894 C 35.952 25.694 37.402 25.594 38.835 25.594 C 43.469 25.594 47.885 26.694 52.085 28.894 C 52.523 28.387 52.978 27.894 53.448 27.416 C 54.235 26.62 54.981 25.971 55.685 25.469 C 55.939 25.287 56.201 25.116 56.469 24.955 C 57.213 24.515 57.835 24.294 58.335 24.294 C 58.404 24.294 58.472 24.297 58.54 24.303 C 58.784 24.328 58.932 24.4 58.985 24.519 C 59.052 24.669 59.044 24.786 58.96 24.869 C 58.892 24.937 58.803 24.98 58.707 24.99 C 58.683 24.993 58.659 24.995 58.635 24.994 C 58.454 25 58.276 25.049 58.117 25.136 C 57.689 25.356 57.19 25.828 56.62 26.553 C 56.558 26.633 56.496 26.713 56.435 26.794 C 56.06 27.294 55.698 27.803 55.35 28.321 C 55.005 28.837 54.695 29.334 54.42 29.814 C 54.358 29.924 54.296 30.034 54.235 30.144 C 57.802 32.511 60.519 35.544 62.385 39.244 C 63.889 42.241 64.66 45.551 64.635 48.903 C 64.635 48.917 64.635 48.931 64.635 48.944 C 64.635 52.4 63.978 55.293 62.664 57.625 C 62.334 58.212 61.957 58.77 61.535 59.294 C 59.835 61.394 57.769 62.878 55.335 63.744 C 53.333 64.468 51.251 64.947 49.134 65.171 C 48.337 65.253 47.536 65.294 46.735 65.294 C 41.002 65.294 36.119 64.128 32.085 61.794 C 30.421 63.164 28.511 64.202 26.456 64.852 C 24.943 65.316 23.368 65.55 21.785 65.544 C 20.892 65.55 20 65.488 19.116 65.359 C 16.888 65.019 15.309 64.205 14.379 62.919 C 14.161 62.617 13.978 62.289 13.835 61.944 C 13.701 61.614 13.607 61.269 13.554 60.916 C 13.507 60.603 13.484 60.286 13.485 59.969 C 13.49 59.633 13.559 59.3 13.69 58.989 C 13.794 58.733 13.937 58.47 14.119 58.202 C 14.277 57.972 14.45 57.753 14.635 57.544 C 15.559 56.495 16.826 55.809 18.209 55.607 C 18.681 55.53 19.158 55.492 19.635 55.494 C 20.943 55.499 22.241 55.707 23.485 56.109 C 23.644 56.16 23.803 56.213 23.96 56.269 C 25.303 56.748 27.61 57.848 30.882 59.569 C 31.15 59.71 31.418 59.852 31.685 59.994 C 32.435 59.268 33.139 58.497 33.794 57.684 C 34.457 56.87 35.12 55.971 35.782 54.987 C 36.091 54.528 36.392 54.064 36.685 53.594 C 37.689 51.993 38.643 50.361 39.546 48.701 C 40.054 47.768 40.542 46.823 41.01 45.869 C 41.656 44.556 42.331 43.258 43.035 41.975 C 43.818 40.55 44.626 39.14 45.46 37.744 C 46.961 35.229 48.455 33.081 49.943 31.301 C 50.186 31.011 50.433 30.726 50.685 30.444 C 46.952 28.211 42.985 27.094 38.785 27.094 C 37.119 27.098 35.458 27.26 33.822 27.577 C 33.71 27.599 33.597 27.621 33.485 27.644 C 31.593 28.033 29.752 28.641 28.001 29.457 C 25.543 30.593 23.381 32.283 21.685 34.394 C 21.184 35.008 20.734 35.662 20.34 36.349 C 19.919 37.094 19.613 37.825 19.422 38.541 C 19.267 39.113 19.188 39.702 19.185 40.294 C 19.175 40.974 19.281 41.65 19.498 42.293 C 19.904 43.44 20.704 44.301 21.897 44.876 C 22.201 45.021 22.514 45.144 22.835 45.244 C 23.141 45.327 23.45 45.398 23.761 45.457 C 24.065 45.515 24.352 45.554 24.621 45.575 C 24.776 45.588 24.93 45.594 25.085 45.594 C 25.4 45.593 25.714 45.571 26.025 45.528 C 26.399 45.478 26.794 45.4 27.21 45.294 C 27.914 45.114 28.611 44.719 29.301 44.109 C 29.381 44.039 29.459 43.968 29.535 43.894 C 30.945 42.485 31.723 41.168 31.87 39.943 C 31.876 39.894 31.881 39.844 31.885 39.794 C 31.89 39.743 31.902 39.692 31.921 39.644 C 31.994 39.468 32.162 39.407 32.424 39.461 C 32.436 39.464 32.448 39.467 32.46 39.469 C 32.785 39.547 32.93 39.775 32.896 40.153 C 32.894 40.184 32.89 40.214 32.885 40.244 C 32.644 42.29 31.529 44.131 29.828 45.292 C 29.572 45.473 29.308 45.64 29.035 45.794 C 28.347 46.169 27.616 46.457 26.857 46.652 C 26.229 46.812 25.583 46.893 24.935 46.894 Z M 33.285 60.894 C 35.674 62.295 38.314 63.215 41.056 63.601 C 42.407 63.8 43.77 63.898 45.135 63.894 C 50.402 63.894 54.602 62.394 57.735 59.394 C 59.418 57.738 60.575 55.623 61.062 53.312 C 61.353 51.993 61.495 50.645 61.485 49.294 C 61.485 46.228 60.885 43.344 59.685 40.644 C 58.185 37.211 55.969 34.344 53.035 32.044 C 52.779 32.444 52.525 32.845 52.273 33.247 C 51.461 34.544 50.331 36.386 48.881 38.773 C 48.407 39.555 47.933 40.337 47.46 41.119 C 46.804 42.206 46.143 43.29 45.477 44.371 C 43.575 47.462 41.911 50.07 40.485 52.194 C 38.585 55.028 37.085 57.036 35.985 58.219 C 35.725 58.499 35.463 58.777 35.198 59.052 C 34.448 59.83 33.811 60.444 33.285 60.894 Z M 23.144 57.702 C 23.091 57.683 23.038 57.663 22.985 57.644 C 22.367 57.422 21.728 57.263 21.077 57.171 C 20.707 57.12 20.334 57.095 19.96 57.094 C 18.977 57.094 18.194 57.461 17.61 58.194 C 17.457 58.386 17.315 58.586 17.187 58.795 C 16.886 59.292 16.735 59.75 16.735 60.169 C 16.735 60.753 16.869 61.311 17.135 61.844 C 17.585 62.767 18.411 63.452 19.402 63.722 C 19.988 63.904 20.665 63.994 21.435 63.994 C 24.474 63.99 27.439 63.054 29.929 61.313 C 30.083 61.209 30.235 61.103 30.385 60.994 C 26.673 59.218 24.26 58.12 23.144 57.702 Z" fill="#64FFDA"/>
    </g>
  </g>
</svg>